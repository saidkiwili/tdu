@page
@model VerifyOtpModel
@{
    ViewData["Title"] = "Verify Email";
    Layout = "_Layout";
}

<div class="min-h-screen bg-gradient-to-br from-blue-50 to-indigo-100 flex items-center justify-center py-12 px-4 sm:px-6 lg:px-8">
    <div class="max-w-md w-full space-y-8">
        <!-- Header -->
        <div class="text-center">
            <div class="mx-auto h-16 w-16  rounded-full flex items-center justify-center mb-4">
                <svg class="h-8 w-8 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                </svg>
            </div>
            <h2 class="text-3xl font-bold text-gray-900 mb-2">Verify Your Email</h2>
            <p class="text-gray-600">We've sent a 4-digit verification code to</p>
            <p class="text-blue-600 font-medium">@Model.Email</p>
        </div>

        <!-- Alert Messages -->
        @if (TempData["Error"] != null)
        {
            <div class="bg-red-50 border border-red-200 rounded-lg p-4 mb-6">
                <div class="flex">
                    <svg class="h-5 w-5 text-red-400 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    <span class="text-red-800">@TempData["Error"]</span>
                </div>
            </div>
        }

        @if (TempData["Success"] != null)
        {
            <div class="bg-green-50 border border-green-200 rounded-lg p-4 mb-6">
                <div class="flex">
                    <svg class="h-5 w-5 text-green-400 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                    </svg>
                    <span class="text-green-800">@TempData["Success"]</span>
                </div>
            </div>
        }

        <!-- Email Check Reminder -->
        @if (Model.ShowEmailReminder)
        {
            <div class="bg-blue-50 border border-blue-200 rounded-lg p-4 mb-6">
                <div class="flex">
                    <svg class="h-5 w-5 text-blue-400 mr-2 mt-0.5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M3 8l7.89 4.26a2 2 0 002.22 0L21 8M5 19h14a2 2 0 002-2V7a2 2 0 00-2-2H5a2 2 0 00-2 2v10a2 2 0 002 2z"></path>
                    </svg>
                    <div>
                        <h3 class="text-sm font-medium text-blue-800">Check Your Email</h3>
                        <p class="text-sm text-blue-700 mt-1">A verification code has been sent to <strong>@Model.Email</strong>. Please check your email (including spam/junk folder) and enter the 4-digit code below.</p>
                    </div>
                </div>
            </div>
        }

        <!-- OTP Form -->
        <form method="post" class="space-y-6">
            @Html.AntiForgeryToken()
            <input type="hidden" name="Email" value="@Model.Email" />
            <div>
                <label for="otp" class="block text-sm font-medium text-gray-700 mb-4 text-center">
                    Enter Verification Code
                </label>
                <div class="flex justify-center space-x-2 mb-2">
                    @for (int i = 0; i < 4; i++)
                    {
                        <input type="text"
                               id="otp-@i"
                               name="OtpDigits[@i]"
                               maxlength="1"
                               class="otp-input w-12 h-12 text-center text-xl font-bold border-2 border-gray-300 rounded-lg focus:border-blue-500 focus:ring-blue-500 focus:outline-none transition-all duration-200 shadow-sm"
                               oninput="moveToNext(this, @i)"
                               onkeydown="moveToPrev(event, this, @i)"
                               required />
                    }
                </div>
                <p class="text-xs text-gray-500 text-center mt-2">Enter the 4-digit code sent to your email</p>
                <input type="hidden" name="Otp" id="otp" />
            </div>

            <!-- Timer and Resend -->
            <div class="text-center">
                <div id="timer" class="text-sm text-gray-600 mb-2">
                    Code expires in: <span id="countdown" class="font-medium text-blue-600">05:00</span>
                </div>
                <button type="button"
                        id="resendBtn"
                        onclick="resendOtp()"
                        class="text-blue-600 hover:text-blue-800 text-sm font-medium disabled:text-gray-400 disabled:cursor-not-allowed"
                        disabled>
                    Resend Code
                </button>
            </div>

            <!-- Submit Button -->
            <div>
                <button type="submit"
                        class="w-full flex justify-center py-3 px-4 border border-transparent rounded-lg shadow-sm text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500 transition-colors disabled:opacity-50 disabled:cursor-not-allowed hidden"
                        id="verifyBtn"  style="background-color: green;">
                    <span id="verifyText">Verify Code</span>
                    <svg id="verifySpinner" class="hidden animate-spin ml-2 h-4 w-4 text-white" fill="none" viewBox="0 0 24 24">
                        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
                    </svg>
                </button>
            </div>

        </form>

        <!-- Back to Registration -->
        <div class="text-center">
            <a href="/Account/Register" class="text-sm text-gray-600 hover:text-gray-800">
                ‚Üê Back to Registration
            </a>
        </div>
    </div>
</div>

@section Scripts {
<script>
    let countdownTime = 300; // 5 minutes in seconds
    let timerInterval;
    let canResend = false;

    // Auto-focus first input
    document.getElementById('otp-0').focus();

    // Initialize button state
    updateOtpValue();

    // Start countdown timer
    startTimer();

    function startTimer() {
        timerInterval = setInterval(() => {
            countdownTime--;
            updateTimerDisplay();

            if (countdownTime <= 0) {
                clearInterval(timerInterval);
                document.getElementById('resendBtn').disabled = false;
                document.getElementById('resendBtn').classList.remove('disabled:text-gray-400', 'disabled:cursor-not-allowed');
                document.getElementById('countdown').textContent = 'Expired';
                document.getElementById('countdown').classList.add('text-red-600');
                document.getElementById('countdown').classList.remove('text-blue-600');
            } else if (countdownTime <= 60) {
                document.getElementById('countdown').classList.add('text-red-600');
                document.getElementById('countdown').classList.remove('text-blue-600');
            }
        }, 1000);
    }

    function updateTimerDisplay() {
        const minutes = Math.floor(countdownTime / 60);
        const seconds = countdownTime % 60;
        document.getElementById('countdown').textContent =
            `${minutes.toString().padStart(2, '0')}:${seconds.toString().padStart(2, '0')}`;
    }

    function moveToNext(input, index) {
        // Only allow numbers
        input.value = input.value.replace(/[^0-9]/g, '');

        if (input.value.length === 1 && index < 3) {
            document.getElementById(`otp-${index + 1}`).focus();
        }

        // Update hidden OTP field
        updateOtpValue();
    }

    function moveToPrev(event, input, index) {
        if (event.key === 'Backspace' && input.value === '' && index > 0) {
            document.getElementById(`otp-${index - 1}`).focus();
        }

        // Update hidden OTP field
        updateOtpValue();
    }

    function updateOtpValue() {
        let otp = '';
        for (let i = 0; i < 4; i++) {
            const input = document.getElementById(`otp-${i}`);
            otp += input.value;
            console.log(`OTP digit ${i}:`, input.value);
        }
        document.getElementById('otp').value = otp;
        console.log('Combined OTP:', otp);

        // Show/hide verification button based on OTP completeness
        const verifyBtn = document.getElementById('verifyBtn');
        if (otp.length === 4) {
            verifyBtn.classList.remove('hidden');
        } else {
            verifyBtn.classList.add('hidden');
        }
    }

    function resendOtp() {
        if (!canResend && countdownTime > 0) return;

        const btn = document.getElementById('resendBtn');
        const originalText = btn.textContent;

        // Disable button and show loading
        btn.disabled = true;
        btn.textContent = 'Sending...';

        // Send resend request
        fetch('/Account/VerifyOtp?handler=Resend', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/x-www-form-urlencoded',
            },
            body: ''
        })
        .then(response => response.json())
        .then(data => {
            if (data.success) {
                // Reset timer
                countdownTime = 300;
                clearInterval(timerInterval);
                startTimer();

                // Show success message
                showAlert('A new verification code has been sent to your email.', 'success');
            } else {
                showAlert(data.message || 'Failed to resend code. Please try again.', 'error');
                btn.disabled = false;
                btn.textContent = originalText;
            }
        })
        .catch(error => {
            console.error('Error:', error);
            showAlert('An error occurred. Please try again.', 'error');
            btn.disabled = false;
            btn.textContent = originalText;
        });
    }

    function showAlert(message, type) {
        // Remove existing alerts
        const existingAlerts = document.querySelectorAll('.alert-temp');
        existingAlerts.forEach(alert => alert.remove());

        // Create new alert
        const alertDiv = document.createElement('div');
        alertDiv.className = `alert-temp ${type === 'success' ? 'bg-green-50 border-green-200 text-green-800' : 'bg-red-50 border-red-200 text-red-800'} border rounded-lg p-4 mb-6`;
        alertDiv.innerHTML = `
            <div class="flex">
                <svg class="h-5 w-5 mr-2 ${type === 'success' ? 'text-green-400' : 'text-red-400'}" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="${type === 'success' ? 'M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z' : 'M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z'}"></path>
                </svg>
                <span>${message}</span>
            </div>
        `;

        // Insert after the header
        const header = document.querySelector('.text-center');
        header.parentNode.insertBefore(alertDiv, header.nextSibling);

        // Auto-remove after 5 seconds
        setTimeout(() => {
            alertDiv.remove();
        }, 5000);
    }

    // Form submission handling
    document.querySelector('form').addEventListener('submit', function(e) {
        console.log('Form submit event triggered');
        const verifyBtn = document.getElementById('verifyBtn');
        const verifyText = document.getElementById('verifyText');
        const verifySpinner = document.getElementById('verifySpinner');

        // Show loading state
        verifyBtn.disabled = true;
        verifyText.textContent = 'Verifying...';
        verifySpinner.classList.remove('hidden');
    });

    
</script>

<style>
    .otp-input:focus {
        border-color: #3b82f6;
        box-shadow: 0 0 0 2px rgba(59, 130, 246, 0.1);
    }

    .otp-input {
        font-family: 'Courier New', monospace;
        transition: all 0.2s ease;
    }

    .otp-input:hover {
        border-color: #9ca3af;
    }

    /* Center the entire form content */
    .space-y-8 > div {
        display: flex;
        flex-direction: column;
        align-items: center;
    }
</style>
}
