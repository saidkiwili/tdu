@page
@model IndexModel
@{
    ViewData["Title"] = "Permissions Management";
    Layout = "_AdminLayout";
}

<div class="min-h-screen bg-gray-50 py-8">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Header -->
        <div class="mb-8">
            <h1 class="text-3xl font-bold text-gray-900 mb-2">Permissions Management</h1>
            <p class="text-gray-600">Manage system permissions and assign them to roles</p>
        </div>

        <!-- Success/Error Messages -->
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="mb-4 bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded-lg">
                @TempData["SuccessMessage"]
            </div>
        }
        @if (TempData["ErrorMessage"] != null)
        {
            <div class="mb-4 bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg">
                @TempData["ErrorMessage"]
            </div>
        }

        <!-- Permission Categories -->
        <div class="grid grid-cols-1 lg:grid-cols-2 xl:grid-cols-3 gap-6">
            @foreach (var category in Model.PermissionCategories)
            {
                <div class="bg-white rounded-lg shadow-sm border overflow-hidden">
                    <div class="bg-gradient-to-r from-green-500 to-blue-600 px-6 py-4">
                        <h3 class="text-lg font-semibold text-white">@category.Key</h3>
                        <p class="text-green-100 text-sm">@category.Value.Count permissions</p>
                    </div>
                    <div class="p-6">
                        <div class="space-y-3">
                            @foreach (var permission in category.Value)
                            {
                                <div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
                                    <div>
                                        <div class="font-medium text-gray-900">@permission.Name</div>
                                        <div class="text-sm text-gray-500">@permission.Description</div>
                                    </div>
                                    <div class="flex items-center space-x-2">
                                        @foreach (var role in permission.AssignedRoles.Take(2))
                                        {
                                            <span class="inline-flex items-center px-2 py-1 rounded text-xs font-medium bg-blue-100 text-blue-800">
                                                @role
                                            </span>
                                        }
                                        @if (permission.AssignedRoles.Count > 2)
                                        {
                                            <span class="text-xs text-gray-500">+@(permission.AssignedRoles.Count - 2)</span>
                                        }
                                    </div>
                                </div>
                            }
                        </div>
                    </div>
                </div>
            }
        </div>

        <!-- Role-Permission Matrix -->
        <div class="mt-12">
            <div class="bg-white rounded-lg shadow-sm border overflow-hidden">
                <div class="px-6 py-4 border-b border-gray-200">
                    <h3 class="text-lg font-semibold text-gray-900">Role-Permission Matrix</h3>
                    <p class="text-sm text-gray-600">Check/uncheck to assign or remove permissions from roles</p>
                </div>
                
                <div class="overflow-x-auto">
                    <table class="min-w-full">
                        <thead class="bg-gray-50">
                            <tr>
                                <th class="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase">Permission</th>
                                @foreach (var role in Model.Roles)
                                {
                                    <th class="px-3 py-3 text-center text-xs font-medium text-gray-500 uppercase">
                                        <div class="transform -rotate-45 origin-center">@role.Name</div>
                                    </th>
                                }
                            </tr>
                        </thead>
                        <tbody class="bg-white divide-y divide-gray-200">
                            @foreach (var permission in Model.AllPermissions)
                            {
                                <tr class="hover:bg-gray-50">
                                    <td class="px-6 py-4">
                                        <div class="text-sm font-medium text-gray-900">@permission</div>
                                        <div class="text-xs text-gray-500">@GetPermissionDescription(permission)</div>
                                    </td>
                                    @foreach (var role in Model.Roles)
                                    {
                                        <td class="px-3 py-4 text-center">
                                            <input type="checkbox" 
                                                       class="rounded border-gray-300 text-green-600 focus:ring-green-500"
                                                       onchange="updateRolePermission('@role.Id', '@permission', this.checked)"
                                                       @(role.Permissions.Contains(permission) ? "checked" : "")
                                                       @(Model.CanEdit ? "" : "disabled title='You do not have permission to edit'")>
                                        </td>
                                    }
                                </tr>
                            }
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    async function updateRolePermission(roleId, permission, isChecked) {
        try {
            const response = await fetch('?handler=UpdatePermission', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                },
                body: JSON.stringify({
                    roleId: roleId,
                    permission: permission,
                    isAssigned: isChecked
                })
            });

            if (response.ok) {
                // Show success message
                showMessage('Permission updated successfully!', 'success');
            } else if (response.status === 403) {
                // Forbidden - show permission error and revert
                if (typeof Swal !== 'undefined') Swal.fire('Forbidden', 'You do not have permission to update permissions.', 'error');
                else alert('You do not have permission to update permissions.');
                event.target.checked = !isChecked;
            } else {
                // Show error and revert checkbox
                showMessage('Failed to update permission!', 'error');
                event.target.checked = !isChecked;
            }
        } catch (error) {
            showMessage('Error updating permission!', 'error');
            event.target.checked = !isChecked;
        }
    }

    function showMessage(message, type) {
        const alertDiv = document.createElement('div');
        alertDiv.className = `fixed top-4 right-4 px-4 py-3 rounded-lg z-50 ${
            type === 'success' ? 'bg-green-50 border border-green-200 text-green-700' : 
            'bg-red-50 border border-red-200 text-red-700'
        }`;
        alertDiv.textContent = message;
        
        document.body.appendChild(alertDiv);
        
        setTimeout(() => {
            alertDiv.remove();
        }, 3000);
    }
</script>

@functions {
    string GetPermissionDescription(string permission)
    {
        return permission switch
        {
            var p when p.Contains("view") => "View access",
            var p when p.Contains("create") => "Create new items",
            var p when p.Contains("edit") => "Edit existing items", 
            var p when p.Contains("delete") => "Delete items",
            var p when p.Contains("export") => "Export data",
            _ => "System permission"
        };
    }
}
