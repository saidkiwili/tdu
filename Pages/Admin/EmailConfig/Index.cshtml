@page "/Admin/EmailConfig/Index"
@model tae_app.Pages.Admin.EmailConfig.IndexModel
@{
    ViewData["Title"] = "Email Configuration";
    Layout = "_AdminLayout";
}

<style>
    /* SweetAlert2 custom width for admin layout */
    .swal2-popup {
        width: 400px !important;
        max-width: 90vw !important;
    }

    .swal2-html-container {
        max-height: 300px;
        overflow-y: auto;
    }
</style>

<div class="min-h-screen bg-gray-50 py-8">
    <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- Header -->
        <div class="mb-8">
            <h1 class="text-3xl font-bold text-gray-900 mb-2">Email Configuration</h1>
            <p class="text-gray-600">Configure SMTP settings for sending emails</p>
        </div>

        <!-- Success/Error Messages -->
        @if (TempData["SuccessMessage"] != null)
        {
            <div class="mb-4 bg-green-50 border border-green-200 text-green-700 px-4 py-3 rounded-lg">
                @TempData["SuccessMessage"]
            </div>
        }
        @if (TempData["ErrorMessage"] != null)
        {
            <div class="mb-4 bg-red-50 border border-red-200 text-red-700 px-4 py-3 rounded-lg">
                @TempData["ErrorMessage"]
            </div>
        }

        <div class="grid grid-cols-1 lg:grid-cols-3 gap-8">
            <!-- Email Configuration Form -->
            <div class="lg:col-span-2">
                <div class="bg-white rounded-lg shadow-sm border overflow-hidden">
                    <div class="px-6 py-4 border-b border-gray-200">
                        <h3 class="text-lg font-semibold text-gray-900">SMTP Settings</h3>
                        <p class="text-sm text-gray-600">Configure your email server settings</p>
                    </div>
                    
                    <form method="post" asp-page-handler="SaveConfig" class="p-6">
                        @Html.AntiForgeryToken()
                        <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                            <!-- SMTP Server -->
                            <div class="form-group">
                                <label asp-for="EmailConfig.SmtpServer" class="block text-sm font-medium text-gray-700 mb-2">
                                    SMTP Server <span class="text-red-500">*</span>
                                </label>
                                <input asp-for="EmailConfig.SmtpServer" 
                                       class="form-control"
                                       placeholder="smtp.gmail.com" 
                                       required>
                                <span asp-validation-for="EmailConfig.SmtpServer" class="text-red-600 text-sm"></span>
                            </div>

                            <!-- SMTP Port -->
                            <div class="form-group">
                                <label asp-for="EmailConfig.SmtpPort" class="block text-sm font-medium text-gray-700 mb-2">
                                    SMTP Port <span class="text-red-500">*</span>
                                </label>
                                <input asp-for="EmailConfig.SmtpPort" 
                                       type="number" 
                                       class="form-control"
                                       placeholder="587" 
                                       required>
                                <span asp-validation-for="EmailConfig.SmtpPort" class="text-red-600 text-sm"></span>
                            </div>

                            <!-- Username -->
                            <div class="form-group">
                                <label asp-for="EmailConfig.Username" class="block text-sm font-medium text-gray-700 mb-2">
                                    Username <span class="text-red-500">*</span>
                                </label>
                                <input asp-for="EmailConfig.Username" 
                                       class="form-control"
                                       placeholder="your-email@gmail.com" 
                                       required>
                                <span asp-validation-for="EmailConfig.Username" class="text-red-600 text-sm"></span>
                            </div>

                            <!-- Password -->
                            <div class="form-group">
                                <label asp-for="EmailConfig.Password" class="block text-sm font-medium text-gray-700 mb-2">
                                    Password @if (!Model.IsEmailConfigured) { <span class="text-red-500">*</span> }
                                </label>
                                <div class="relative">
                                    <input asp-for="EmailConfig.Password" 
                                           type="password" 
                                           id="passwordInput"
                                           class="form-control pr-10"
                                           placeholder="••••••••"
                                           data-required="@(!Model.IsEmailConfigured)">
                                    <button type="button" 
                                            onclick="togglePassword()"
                                            class="absolute inset-y-0 right-0 pr-3 flex items-center text-gray-400 hover:text-gray-600">
                                        <i class="fas fa-eye" id="eyeIcon"></i>
                                    </button>
                                </div>
                                <span asp-validation-for="EmailConfig.Password" class="text-red-600 text-sm"></span>
                                @if (Model.IsEmailConfigured)
                                {
                                    <p class="text-sm text-gray-500 mt-1">Leave blank to keep the existing password</p>
                                }
                            </div>

                            <!-- From Address -->
                            <div class="form-group">
                                <label asp-for="EmailConfig.FromAddress" class="block text-sm font-medium text-gray-700 mb-2">
                                    From Address <span class="text-red-500">*</span>
                                </label>
                                <input asp-for="EmailConfig.FromAddress" 
                                       type="email" 
                                       class="form-control"
                                       placeholder="noreply@tduae.org" 
                                       required>
                                <span asp-validation-for="EmailConfig.FromAddress" class="text-red-600 text-sm"></span>
                            </div>

                            <!-- From Name -->
                            <div class="form-group">
                                <label asp-for="EmailConfig.FromName" class="block text-sm font-medium text-gray-700 mb-2">
                                    From Name
                                </label>
                                <input asp-for="EmailConfig.FromName" 
                                       class="form-control"
                                       placeholder="TDUAE - Tanzania Diaspora UAE">
                            </div>
                        </div>

                        <!-- SSL/TLS Options -->
                        <div class="mt-6">
                            <div class="flex items-center justify-between p-4 bg-gray-50 rounded-lg">
                                <div>
                                    <h4 class="text-sm font-medium text-gray-900">Use SSL/TLS</h4>
                                    <p class="text-sm text-gray-500">Enable secure connection (recommended)</p>
                                </div>
                                <label class="relative inline-flex items-center cursor-pointer">
                                    <input type="checkbox" asp-for="EmailConfig.UseSsl" class="sr-only peer">
                                    <div class="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-green-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-green-600"></div>
                                </label>
                            </div>
                        </div>

                        <!-- Action Buttons -->
                        <div class="mt-8 flex items-center justify-between">
                            <div>
                                @if (Model.CanEdit)
                                {
                                    <button type="button" onclick="testConfiguration()" class="btn-secondary">
                                        <i class="fas fa-paper-plane mr-2"></i>Test Configuration
                                    </button>
                                }
                                else
                                {
                                    <button type="button" class="btn-secondary" disabled title="You don't have permission"> <i class="fas fa-paper-plane mr-2"></i>Test Configuration</button>
                                }
                            </div>
                            <div class="space-x-3">
                                <button type="button" onclick="confirmReset()" class="btn-secondary">Reset</button>
                                @if (Model.CanEdit)
                                {
                                    <button type="submit" class="btn-primary">
                                        <i class="fas fa-save mr-2"></i>Save Configuration
                                    </button>
                                }
                                else
                                {
                                    <button type="button" class="btn-primary" disabled title="You don't have permission"><i class="fas fa-save mr-2"></i>Save Configuration</button>
                                }
                            </div>
                        </div>
                    </form>
                </div>
            </div>

            <!-- Email Templates & Status -->
            <div class="space-y-6">
                <!-- Current Status -->
                <div class="bg-white rounded-lg shadow-sm border overflow-hidden">
                    <div class="px-6 py-4 border-b border-gray-200">
                        <h3 class="text-lg font-semibold text-gray-900">Email Status</h3>
                    </div>
                    <div class="p-6">
                        <div class="flex items-center space-x-3 mb-4">
                            <div class="w-3 h-3 bg-@(Model.IsEmailConfigured ? "green" : "red")-500 rounded-full"></div>
                            <span class="text-sm font-medium text-gray-900">
                                @(Model.IsEmailConfigured ? "Configured" : "Not Configured")
                            </span>
                        </div>
                        
                        @if (Model.IsEmailConfigured)
                        {
                            <div class="text-sm text-gray-600 space-y-2">
                                <div>Server: @Model.EmailConfig.SmtpServer:@Model.EmailConfig.SmtpPort</div>
                                <div>From: @Model.EmailConfig.FromAddress</div>
                                <div>SSL: @(Model.EmailConfig.UseSsl ? "Enabled" : "Disabled")</div>
                                <div>Last Updated: @DateTime.Now.ToString("MMM dd, yyyy")</div>
                            </div>
                        }
                        else
                        {
                            <p class="text-sm text-gray-500">Please configure email settings to enable email functionality.</p>
                        }
                    </div>
                </div>

                <!-- Quick Setup Templates -->
                <div class="bg-white rounded-lg shadow-sm border overflow-hidden">
                    <div class="px-6 py-4 border-b border-gray-200">
                        <h3 class="text-lg font-semibold text-gray-900">Quick Setup</h3>
                    </div>
                    <div class="p-6">
                        <div class="space-y-3">
                            <button onclick="loadGmailConfig()" class="w-full text-left p-3 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
                                <div class="flex items-center space-x-3">
                                    <i class="fab fa-google text-red-500"></i>
                                    <div>
                                        <div class="font-medium">Gmail</div>
                                        <div class="text-sm text-gray-500">smtp.gmail.com:587</div>
                                    </div>
                                </div>
                            </button>
                            
                            <button onclick="loadOutlookConfig()" class="w-full text-left p-3 border border-gray-200 rounded-lg hover:bg-gray-50 transition-colors">
                                <div class="flex items-center space-x-3">
                                    <i class="fab fa-microsoft text-blue-500"></i>
                                    <div>
                                        <div class="font-medium">Outlook</div>
                                        <div class="text-sm text-gray-500">smtp.outlook.com:587</div>
                                    </div>
                                </div>
                            </button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<script>
    function togglePassword() {
        const passwordInput = document.getElementById('passwordInput');
        const eyeIcon = document.getElementById('eyeIcon');
        
        if (passwordInput.type === 'password') {
            passwordInput.type = 'text';
            eyeIcon.className = 'fas fa-eye-slash';
        } else {
            passwordInput.type = 'password';
            eyeIcon.className = 'fas fa-eye';
        }
    }

    function loadGmailConfig() {
        document.querySelector('input[name="EmailConfig.SmtpServer"]').value = 'smtp.gmail.com';
        document.querySelector('input[name="EmailConfig.SmtpPort"]').value = '587';
        document.querySelector('input[name="EmailConfig.UseSsl"]').checked = true;
    }

    function loadOutlookConfig() {
        document.querySelector('input[name="EmailConfig.SmtpServer"]').value = 'smtp.outlook.com';
        document.querySelector('input[name="EmailConfig.SmtpPort"]').value = '587';
        document.querySelector('input[name="EmailConfig.UseSsl"]').checked = true;
    }

    function confirmReset(){
        if (typeof Swal !== 'undefined'){
            Swal.fire({
                title: 'Reset configuration?',
                text: 'This will clear the form fields. Continue?',
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes, reset',
                cancelButtonText: 'Cancel',
                width: '400px'
            }).then((res) => {
                if (res.isConfirmed) document.querySelector('form').reset();
            });
        } else {
            if (confirm('Are you sure you want to reset all email configuration?')) {
                document.querySelector('form').reset();
            }
        }
    }

    function testConfiguration() {
        console.log('Testing email configuration via AJAX...');

        // Show loading message
        if (typeof Swal !== 'undefined') {
            Swal.fire({
                title: 'Sending Test Email',
                text: 'Please wait while we send the test email...',
                allowOutsideClick: false,
                allowEscapeKey: false,
                showConfirmButton: false,
                width: '400px',
                willOpen: () => {
                    Swal.showLoading();
                }
            });
        }

        // Get the anti-forgery token
        const tokenInput = document.querySelector('input[name="__RequestVerificationToken"]');
        const token = tokenInput ? tokenInput.value : '';

        if (!token) {
            console.error('Anti-forgery token not found');
            if (typeof Swal !== 'undefined') {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: 'Security token not found. Please refresh the page and try again.',
                    confirmButtonText: 'OK',
                    confirmButtonColor: '#EF4444',
                    width: '400px'
                });
            }
            return;
        }

        // Make AJAX request
        fetch('?handler=TestEmail', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'RequestVerificationToken': token
            },
            body: JSON.stringify({})
        })
        .then(response => {
            console.log('Response status:', response.status);
            return response.json().then(data => {
                if (!response.ok) {
                    throw new Error(data.message || `HTTP ${response.status}: ${response.statusText}`);
                }
                return data;
            });
        })
        .then(result => {
            console.log('Test email result:', result);

            if (typeof Swal !== 'undefined') {
                if (result.success) {
                    Swal.fire({
                        icon: 'success',
                        title: 'Test Email Sent!',
                        text: result.message || 'Test email has been sent successfully!',
                        confirmButtonText: 'OK',
                        confirmButtonColor: '#10B981',
                        width: '400px'
                    });
                } else {
                    Swal.fire({
                        icon: 'error',
                        title: 'Test Failed',
                        text: result.message || 'Failed to send test email.',
                        confirmButtonText: 'OK',
                        confirmButtonColor: '#EF4444',
                        width: '400px'
                    });
                }
            } else {
                if (result.success) {
                    alert('Test email sent successfully!');
                } else {
                    alert('Failed to send test email: ' + (result.message || 'Unknown error'));
                }
            }
        })
        .catch(error => {
            console.error('Error sending test email:', error);

            const errorMessage = error.message || 'An unexpected error occurred while sending the test email.';

            if (typeof Swal !== 'undefined') {
                Swal.fire({
                    icon: 'error',
                    title: 'Test Failed',
                    text: errorMessage,
                    confirmButtonText: 'OK',
                    confirmButtonColor: '#EF4444',
                    width: '400px'
                });
            } else {
                alert('Failed to send test email: ' + errorMessage);
            }
        });
    }
</script>
